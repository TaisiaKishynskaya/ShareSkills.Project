@page "/cabinet"
@inject NavigationManager Navigation
@inject HttpClient httpClient
@inject CabinetService CabinetService
@inject IJSRuntime JSRuntime

<div class="main">
    <div class="title">
        <p>Share</p>
    </div>

    <div class="content">
        @if (user != null)
        {
            <div class="block">
                <p class="name">@user.Name @user.Surname</p>
                <p class="email">@user.Email</p>
            </div>
            <hr>
            @* <div class="block">
                <p class="skills-text">Choosed skills</p>
                <div class="skills-cards">
                    @foreach (var skill in skills)
                    {
                        <div class="skill-card">
                            <p>@skill</p>
                        </div>
                    }
                </div>
            </div> *@
            <hr>
            <button class="feedback" @onclick="() => IsShowDialog=true">Change profile information</button>
            <button class="feedback" @onclick='() => Navigation.NavigateTo("/chooseSkills")'>Change skills</button>
            @if (!isTeacher)
            {
            <button class="feedback" @onclick="goToFeedbackPage">Leave feedback</button>
            }
        }
        else
        {
            <p>loading...</p>
        }
        @* for debug *@
        @* <button class="feedback" @onclick="ClearPreferences">clear Preferences</button> *@
    </div>
    @if (IsShowDialog)
    {
        <div class="dialog">
            <svg @onclick="() => IsShowDialog=false" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.2 288 416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-306.7 0L214.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z"/></svg>
            <input type="text" class="dialog-input" placeholder="Name" @bind="@userToChange.Name">
            <input type="text" class="dialog-input" placeholder="Surname" @bind = "@userToChange.Surname">
            <input type="text" class="dialog-input" placeholder="Email" @bind = "@userToChange.Email">
            <input type="text" class="dialog-input" placeholder="Password" @bind = "@newPassword">
            <button class="next-btn" @onclick="ChangeInfo">
                Change
            </button>
        </div>
    }
</div>

@code {
    private User user;
    private User userToChange = new User
    {
        Id = "",
        Name = "",
        Surname = "",
        Email = "",
        PasswordHash = "",
        Role = "",
    };
    private String newPassword = "";
    private string[] skills = {"Python", "Java", "C#", "HTML", "C++"};
    private bool IsShowDialog = false;
    private bool isTeacher;

    protected override async Task OnInitializedAsync()
    {
        user = await CabinetService.GetUser();
        isTeacher = (await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userRole") == "2ab125a8-72d8-43dd-8860-152bc1cbdf07") ? true : false;
    }

    private void goToFeedbackPage()
    {
        Navigation.NavigateTo("/feedback");
    }

    // for debug
    private async Task ClearPreferences()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("localStorage.clear");
            Console.WriteLine("Cleared Preferences");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error clearing preferences: {ex.Message}");
        }
    }

    private async Task ChangeInfo()
    {
        if (await CabinetService.ChangeInfo(userToChange, newPassword))
        {
            IsShowDialog = false;
        }
    }
}
