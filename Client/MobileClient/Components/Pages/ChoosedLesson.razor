@page "/lesson/{id}"
@inject NavigationManager Navigation
@inject HttpClient httpClient

<div class="main">
    @if (teacher != null && meeting != null)
    {
        <div class="title">
            <svg @onclick="goBack" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.2 288 416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-306.7 0L214.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z"/></svg>
            <p>@Id</p>
            <div class="blank"></div>
        </div>

        <div class="content">
            <div class="block">
                <p class="text-info">Ментор:</p>
                <p class="text-value">@teacher.Name @teacher.Surname</p>
            </div>

            <div class="block">
                <p class="text-info">Час:</p>
                <p class="text-value">@meeting.DateTime.TimeOfDay</p>
            </div>

            <div class="block">
                <p class="text-info">Посилання:</p>
                <a class="text-value" href="#">Приєднатися</a>
            </div>
        </div>

        <button class="cancel" @onclick="CancelMeeting">скасувати</button>
    }
    else 
    {
        <p>loading...</p>
    }
</div>


@code {
    [Parameter]
    public required string Id { get; set; }

    public class Teacher
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Surname { get; set; }
        public string Email { get; set; }
        public string PasswordHash { get; set; }
        public string Role { get; set; }
    }
    public class Meeting
    {
        public Guid Id { get; set; }
        public DateTime DateTime { get; set; }
        public string Description { get; set; }
        public Guid OwnerId { get; set; }
        public Guid ForeignId { get; set; }
    }

    private Meeting meeting;
    private Teacher teacher;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await httpClient.GetAsync($"http://localhost:5115/meetings/{Id}");
            if (response.IsSuccessStatusCode)
            {
                meeting = await response.Content.ReadFromJsonAsync<Meeting>();
                try 
                {
                    var response2 = await httpClient.GetAsync($"http://localhost:5115/users/{meeting.OwnerId}");
                    if (response2.IsSuccessStatusCode)
                    {
                        teacher = await response2.Content.ReadFromJsonAsync<Teacher>();
                        StateHasChanged();
                    }
                    
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

    }

    private async Task CancelMeeting()
    {
        try
        {
            var response = httpClient.DeleteAsync($"http://localhost:5115/meetings/{Id}");
            //TODO: обработать, когда запрос выполнен успешно
            @* if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"deleted meeting with id: {Id}");
                this.goBack();
            } *@
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    public void goBack() {
        Navigation.NavigateTo("/calendar");
    }
}