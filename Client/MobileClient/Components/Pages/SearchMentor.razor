@page "/search"
@using MobileClient.Services
@inject NavigationManager Navigation
@inject AuthService AuthService
@inject SearchService SearchService

<div class="main">
    <div class="search">
        <input class="mentor-search" type="email" placeholder="Search teacher..." @bind="email">
        <svg @onclick="()=>isFilters = !isFilters" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z"/></svg>
    </div>
    @if (isFilters)
    {
        <div class="filters-container">
            <div class="filters">
                <div class="col">
                    <div class="head">
                        <p>skill:</p>
                    </div>
                    <div class="content">
                        @if (skills != null)
                        {
                            @foreach (var skill in skills)
                            {
                                <div class="skill-check-container">
                                    <input class="skill-check" type="radio" name="skill" @onchange="@(()=>choosedSkill = @skill.skill)">
                                    <p>@skill.skill</p>
                                </div>
                            }
                        }
                    </div>
                </div>

                <div class="col">
                    <div class="head">
                        <p>time:</p>
                    </div>
                    <div class="content">
                        <div class="skill-check-container">
                            <input class="skill-check" type="radio" name="time" @onchange="@(()=>time = "Morning")">
                            <p>Morning</p>
                        </div>
                        <div class="skill-check-container">
                            <input class="skill-check" type="radio" name="time" @onchange="@(()=>time = "Day")">
                            <p>Day</p>
                        </div>
                        <div class="skill-check-container">
                            <input class="skill-check" type="radio" name="time" @onchange="@(()=>time = "Evening")">
                            <p>Evening</p>
                        </div>
                    </div>
                </div>

                <div class="col">
                    <div class="head">
                        <p>level:</p>
                    </div>
                    <div class="content">
                        <div class="skill-check-container">
                            <input class="skill-check" type="radio" name="level" @onchange="@(()=>level = "Introductory")">
                            <p>Introductory</p>
                        </div>
                        <div class="skill-check-container">
                            <input class="skill-check" type="radio" name="level" @onchange="@(()=>level = "Advanced")">
                            <p>Advanced</p>
                        </div>
                        <div class="skill-check-container">
                            <input class="skill-check" type="radio" name="level" @onchange="@(()=>level = "Intermediate")">
                            <p>Intermediate</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    <button class="find-btn" @onclick="searchTeacher">find</button>
    <div class="mentor-cards">
        @if (teachers != null)
        {
        @foreach (var teacher in teachers)
        {
            @if(teacher != null)
            {
            <div class="card" @onclick="() => OpenMentorInformation(teacher.id)">
                <div class="text">
                    <p>@teacher.name</p>
                    <p>@teacher.skill</p>
                </div>
                <div class="rating">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill="yellow" d="M316.9 18C311.6 7 300.4 0 288.1 0s-23.4 7-28.8 18L195 150.3 51.4 171.5c-12 1.8-22 10.2-25.7 21.7s-.7 24.2 7.9 32.7L137.8 329 113.2 474.7c-2 12 3 24.2 12.9 31.3s23 8 33.8 2.3l128.3-68.5 128.3 68.5c10.8 5.7 23.9 4.9 33.8-2.3s14.9-19.3 12.9-31.3L438.5 329 542.7 225.9c8.6-8.5 11.7-21.2 7.9-32.7s-13.7-19.9-25.7-21.7L381.2 150.3 316.9 18z"/></svg>
                    <p>@teacher.rating</p>
                </div>
            </div>
            }
        }
        }
    </div>
</div>

@code {

    private List<Skill> skills;
    private bool isFilters = false;
    private string email;
    private string choosedSkill;
    private string time;
    private string level;
    private List<Teacher?> teachers = new List<Teacher?>();

    protected override async Task OnInitializedAsync()
    {
        skills = await AuthService.GetSkills();
    }
    
    private async Task searchTeacher()
    {
       Teacher? teacher;
       if ((choosedSkill == null || time == null || level == null) && email != null)
       {
        teacher = await SearchService.GetTeacherByEmail(email);
       }
       else
       {
        teacher = await SearchService.SearchTeacher(choosedSkill, time, level);
        }
        teachers.Add(teacher);
    }

    private void OpenMentorInformation(string mentorId) {
        Navigation.NavigateTo($"/mentor/{mentorId}");
    }
}